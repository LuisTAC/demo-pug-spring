//Release Faceade Jenkins
def get_branch_type(String branch_name) {
    //Must be specified according to <flowInitContext> configuration of jgitflow-maven-plugin in pom.xml
    def dev_pattern = ".*develop"
    def release_pattern = ".*release/.*"
    def feature_pattern = ".*feature/.*"
    def hotfix_pattern = ".*hotfix/.*"
    def master_pattern = ".*master"
    if (branch_name =~ dev_pattern) {
        return "develop"
    } else if (branch_name =~ release_pattern) {
        return "release"
    } else if (branch_name =~ master_pattern) {
        return "master"
    } else if (branch_name =~ feature_pattern) {
        return "feature"
    } else if (branch_name =~ hotfix_pattern) {
        return "hotfix"
    } else {
        return null;
    }
}

def getRegistryName(String branch_name) {
    def dev_pattern = ".*develop"
    def release_pattern = ".*release/.*"
    def feature_pattern = ".*feature/.*"
    def hotfix_pattern = ".*hotfix/.*"
    def master_pattern = ".*master"
    if (branch_name =~ dev_pattern) {
        return "eu.gcr.io/helios-qua"
    } else if (branch_name =~ release_pattern) {
        return "eu.gcr.io/helios-qua"
    } else if (branch_name =~ master_pattern) {
        return "eu.gcr.io/helios-qua"
    } else if (branch_name =~ feature_pattern) {
        return "eu.gcr.io/helios-qua"
    } else if (branch_name =~ hotfix_pattern) {
        return "eu.gcr.io/helios-qua"
    } else {
        return "eu.gcr.io/helios-qua";
    }
}
def getVersion(String version, String branch_name) {
  if (branch_name =~ ".*feature/.*") {
      	return version.replace("SNAPSHOT",branch_name.replace("feature/",""));
  }else if(branch_name =~ ".*hotfix/.*"){
    	return version+"-hotfix";
  }else{
        return version;
  }
}

def isReturnScript(String command){
		return sh(script: command, returnStatus: true);
}

def getFeatureName(String branch_name) {
	return branch_name.replace("feature/","");
}

def getBranchAsCode(String branch_name) {
	return branch_name.replace("/","%2F");
}
pipeline {
  agent { label 'master' }
  options {
    buildDiscarder(logRotator(numToKeepStr: '3'))
  }
  environment {
    GCLOUD_PATH = "/var/jenkins_home/gcloud/google-cloud-sdk/bin"
    PROJECT_NAME = "integration-java-spring-mapper"
    JAVA_HOME ="${tool 'jdk8'}"
   // PROJECT_GS_NAME = "gs://facade-dev-data"
   // MACHINE_NAMES ="psit-integration-vm-facade-"
    //JOB_CREATE_VM="featureVMfacade"
  }
  tools{
    maven 'Maven-Default'
  }
  stages{
    
    stage('Configurations') {
      parallel {
          stage("read Version"){
      steps{
        script {
          VERSION_POM =readMavenPom().getVersion()
          VERSION = getVersion("${VERSION_POM}","${env.BRANCH_NAME}")
          REGISTRY = getRegistryName("${env.BRANCH_NAME}");
         // CREATEPSIT = readMavenPom().properties['project.build.createPsit'];
          FEATURE_NAME = getFeatureName("${env.BRANCH_NAME}")
          FEATURE_NAME_LOW = "${FEATURE_NAME}".toLowerCase()
         // MIG_NAME ="${MACHINE_NAMES}"+"${FEATURE_NAME_LOW}"+"-mig"
          //GS_NAME = "${PROJECT_GS_NAME}"+"/psit"+"${FEATURE_NAME_LOW}"
        }
        echo "Building feature ${FEATURE_NAME}"
        echo "Building version ${VERSION}"
        echo "Building in Registry ${REGISTRY}"
        echo "Building in Registry ${env.BRANCH_NAME}"
      }
    }
        stage('Check Snapshots') {
          when { anyOf {expression { get_branch_type("${env.BRANCH_NAME}")=="master" }; expression { get_branch_type("${env.BRANCH_NAME}")=="release" }}}
          steps {
            configFileProvider([configFile(fileId: '0246210f-143b-42f5-96e3-55da40fe8903', variable: 'MAVEN_GLOBAL_SETTINGS')]) {
              withCredentials([file(credentialsId: 'helios_qua', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                mavenSnapshotCheck check: 'true'
              }
            }
          }
        }    
      }
    }
     stage('Verify Sonar') {
      steps{
        configFileProvider([configFile(fileId: '0246210f-143b-42f5-96e3-55da40fe8903', variable: 'MAVEN_GLOBAL_SETTINGS')]) {
            withEnv(["JAVA_HOME=${tool 'jdk11'}/jdk-11", "PATH=${tool 'jdk11'}/jdk-11/bin:${env.PATH}"]) {
                sh 'ls /var/jenkins_home/tools/hudson.model.JDK/jdk11/jdk-11'
                sh "mvn clean verify sonar:sonar -Dsonar.projectKey=pt.jmellosaude:integration-java-spring-mapper -Dsonar.branch.name=master -Dsonar.host.url=http://sonarqube:9000/sonarqube/ -Dsonar.login=bfeefe00f132df731fc852005c4d8bf7adb75b22"
            }
        }
      }
    }
    stage('Build jar') {
      steps{
        configFileProvider([configFile(fileId: '0246210f-143b-42f5-96e3-55da40fe8903', variable: 'MAVEN_GLOBAL_SETTINGS')]) {
            withEnv(["JAVA_HOME=${tool 'jdk11'}/jdk-11", "PATH=${tool 'jdk11'}/jdk-11/bin:${env.PATH}"]) {
                echo "Building feature $JAVA_HOME"
                sh 'ls /var/jenkins_home/tools/hudson.model.JDK/jdk11/jdk-11'
                sh "mvn package "
            }
        }
      }
    }
    stage("build image"){
      steps{
        configFileProvider([configFile(fileId: '0246210f-143b-42f5-96e3-55da40fe8903', variable: 'MAVEN_GLOBAL_SETTINGS')]) {
          withCredentials([file(credentialsId: 'helios_qua', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
            sh "docker build --build-arg BASE_VERSION=${VERSION} -t ${REGISTRY}/${env.PROJECT_NAME}:${VERSION} ."
          }
        }
      }
    }
    stage("push image to registry"){
      parallel {
        stage("push image PROD"){
          steps{
            sh "docker push ${REGISTRY}/${env.PROJECT_NAME}:${VERSION}"
          }
        }
      }
    }
    stage('Clean and create'){
      parallel {
        stage("docker clean"){
          steps{
            sh "docker rmi ${REGISTRY}/${env.PROJECT_NAME}:${VERSION}"
          }
        }
      }
    }
  }
  post{
    always{
      cleanWs()
    }
  }
}
